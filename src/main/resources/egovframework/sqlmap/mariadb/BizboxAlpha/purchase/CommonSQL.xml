<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="CommonSQL">

	<select	id="CommonSQL.getGroupInfo" parameterClass="HashMap" resultClass="HashMap">
		select * from $DB_NEOS$t_co_group
	</select>
	
	<select	id="CommonSQL.getCompInfo" parameterClass="HashMap" resultClass="HashMap">
		select * from $DB_NEOS$t_co_comp where comp_seq = '$compSeq$'
	</select>	
	
	<select	id="CommonSQL.getGroupPathInfo" parameterClass="HashMap" resultClass="HashMap">
		select * from $DB_NEOS$t_co_group_path where os_type = '$osType$' and path_seq = '$pathSeq$'
	</select>	
	
	<select	id="CommonSQL.checkAuth" parameterClass="HashMap" resultClass="int">
		
		SELECT count(*)
		FROM $DB_NEOS$t_co_auth_relate car
		JOIN $DB_NEOS$t_co_authcode a ON car.author_code = a.author_code  AND car.author_type = a.author_type AND a.author_use_yn = 'Y'
		join $DB_NEOS$t_co_menu_auth ma on a.author_code = ma.author_code 
		join $DB_NEOS$t_co_menu m on ma.menu_no = m.menu_no and m.url_path like concat('%','$servletPath$','%')
		WHERE (car.author_type = '001' and car.comp_seq='$compSeq$' and car.emp_seq='$empSeq$') or (car.author_type = '002' and car.dept_seq='$deptSeq$')
		
	</select>	
	
	<select	id="CommonSQL.SelectPurchaseDetailCodeList" parameterClass="HashMap" resultClass="HashMap">
		
		select
		`GROUP`, CODE, NAME, USE_YN, ORDER_NUM, NOTE, LINK
		from cust_sto.t_purchase_code_detail 
		where 1=1
		<isNotEmpty property="useYn">
		and USE_YN = '$useYn$'
		</isNotEmpty>		
		<isNotEmpty property="group">
		and `GROUP`='$group$'
		</isNotEmpty>
		<isNotEmpty property="code">
		and `CODE`='$code$'
		</isNotEmpty>		
		order by `GROUP`, ORDER_NUM
	</select>
	
	<select	id="CommonSQL.SelectPurchaseDetailCodeInfo" parameterClass="HashMap" resultClass="HashMap">
		
		select
		`GROUP`, CODE, NAME, USE_YN, ORDER_NUM, NOTE, LINK, FORM_HTML
		from cust_sto.t_purchase_code_detail 
		where 1=1
		<isNotEmpty property="useYn">
		and USE_YN = '$useYn$'
		</isNotEmpty>		
		<isNotEmpty property="group">
		and `group`='$group$'
		</isNotEmpty>
		<isNotEmpty property="code">
		and `code`='$code$'
		</isNotEmpty>	
		limit 1;	
	</select>
	
	<select	id="CommonSQL.SelectNewManageNo" parameterClass="HashMap" resultClass="HashMap">
	
		select concat(
		(case when target.contract_type = '01' then target.budget_type else target.c_budget_type end)
		, '-', YEAR(now()), '-', LPAD( ifnull( (select max(substr(manage_no, 9)) from cust_sto.t_purchase_contract where manage_no like concat(
		(case when target.contract_type = '01' then target.budget_type else target.c_budget_type end)
		,'-',YEAR(now()),'-%')) , '0') + 1 , 4, '0')) as new_manage_no
		from cust_sto.t_purchase_contract target where target.manage_no = '' and seq = '$seq$';	
		
	</select>		
	
	<select	id="CommonSQL.SelectApprFormDataContract" parameterClass="HashMap" resultClass="HashMap">
		
		SELECT 
		a.seq,
		ifnull(a.c_title, a.title) as title,  
		ifnull(a.manage_no,'') as manage_no, 
		ifnull(a.contract_no,'') as contract_no,
		a.contract_type as contract_type,
		dm.dept_name as write_dept_name,
		em.emp_name as write_emp_name,
		ifnull(a.c_write_dt, a.write_dt) as write_dt,
		cust_sto.fn_get_purchase_code_text('notiType',a.noti_type) as noti_type, 
		cust_sto.fn_get_purchase_code_text('budgetType',ifnull(a.c_budget_type, a.budget_type)) as budget_type, 
		cust_sto.fn_get_purchase_code_text('targetType',ifnull(a.c_target_type, a.target_type)) as target_type, 
		ifnull(a.contract_start_dt, '') as contract_start_dt, 
		ifnull(a.c_contract_end_dt, a.contract_end_dt) as contract_end_dt, 
		ifnull(FORMAT(a.amt, 0),'') as amt,
		ifnull(a.amt_kor,'') as amt_kor,
		ifnull(FORMAT(a.contract_amt, 0),'') as contract_amt,
		ifnull(a.contract_amt_kor,'') as contract_amt_kor,		
		FORMAT(a.std_amt, 0) as std_amt,
		FORMAT(a.tax_amt, 0) as tax_amt,
		cust_sto.fn_get_purchase_code_text('baseLaw',a.base_law) as base_law,
		cust_sto.fn_get_purchase_code_text('contractLaw',a.contract_law) as contract_law, 
		cust_sto.fn_get_purchase_code_text('payType',a.pay_type_info) as pay_type, 
		ifnull(a.c_work_info, a.work_info) as work_info, 
		a.emergency_yn, 
		a.restrict_sector_yn, 
		cust_sto.fn_get_purchase_code_text('competeType',a.compete_type) as compete_type, 
		cust_sto.fn_get_purchase_code_text('restrictSector',a.restrict_sector_info) as restrict_sector, 
		cust_sto.fn_get_purchase_code_text('restrictArea',a.restrict_area_info) as restrict_area, 
		a.nominee_info, 
		cust_sto.fn_get_purchase_code_text('decisionType',a.decision_type_info) as decision_type, 
		cust_sto.fn_get_purchase_code_text('contractForm1',ifnull(a.c_contract_form1, a.contract_form1)) as contract_form1,
		cust_sto.fn_get_purchase_code_text('contractForm2',ifnull(a.c_contract_form2, a.contract_form2)) as contract_form2,
		cust_sto.fn_get_purchase_code_text('contractForm3',a.contract_form3) as contract_form3,
		
		a.rebid_yn, 
		a.eorder_use_yn, 
		a.created_dt, 
		a.created_by, 
		a.modify_dt, 
		a.modify_by,
		
		ifnull(a.pre_notice_end_dt,'') as pre_notice_end_dt,
		ifnull(a.notice_start_dt,'') as notice_start_dt,
		ifnull(a.notice_end_dt,'') as notice_end_dt,
		ifnull(a.re_notice_start_dt,'') as re_notice_start_dt,
		ifnull(a.re_notice_end_dt,'') as re_notice_end_dt,		
				
		ifnull((select concat(
		substr(pbi.erp_bgt1_name, 5),case when pbi.erp_bgt2_name = '' then '' else ' / ' end ,
		substr(pbi.erp_bgt2_name, 5),case when pbi.erp_bgt3_name = '' then '' else ' / ' end ,
		substr(pbi.erp_bgt3_name, 5),case when pbi.erp_bgt4_name = '' then '' else ' / ' end ,
		substr(pbi.erp_bgt4_name, 5)) from cust_sto.t_purchase_budget_info pbi where pbi.outProcessCode = 'Contract02' and pbi.seq = a.seq limit 1),'') as meet_budget_name,
		
		ifnull((select concat(
		substr(pbi.erp_bgt1_name, 5),case when pbi.erp_bgt2_name = '' then '' else ' / ' end ,
		substr(pbi.erp_bgt2_name, 5),case when pbi.erp_bgt3_name = '' then '' else ' / ' end ,
		substr(pbi.erp_bgt3_name, 5),case when pbi.erp_bgt4_name = '' then '' else ' / ' end ,
		substr(pbi.erp_bgt4_name, 5)) from cust_sto.t_purchase_budget_info pbi where pbi.outProcessCode like '%Conclusion01%' and pbi.seq = a.seq limit 1),'') as conclusion_budget_name,		
		
		ifnull(a.result_judges_info_html,'') as result_judges_info_html,
		ifnull(a.result_score_info_html,'') as result_score_info_html,

		ifnull(pti.tr_name,'') as tr_name,
		ifnull(pti.ceo_name,'') as ceo_name,
		ifnull(pti.tr_reg_number,'') as tr_reg_number,
		ifnull(pti.addr,'') as addr,
		ifnull(pti.depositor,'') as depositor,
		ifnull(pti.ba_nb,'') as ba_nb,
		ifnull(pti.btr_name,'') as btr_name,
		ifnull(pti.pm_email,'') as pm_email,
		ifnull(pti.pm_hp,'') as pm_hp,
		ifnull(pti.pm_name,'') as pm_name,
		cust_sto.fn_get_purchase_code_text('privateReason',a.private_reason) as private_reason,
		
		case when ifnull(a.hope_company_info, '') = '' then '해당없음' else
		cust_sto.fn_get_purchase_code_text('hopeCompany', a.hope_company_info) end as hope_company_info,	
		cust_sto.fn_get_purchase_code_text('jointContractMethod', a.joint_contract_method) as joint_contract_method,

		<isNotEmpty property="change_seq">
		case when ifnull(pcc.contract_end_dt_after,'') != '' then pcc.contract_end_dt_after else a.contract_end_dt end as contract_end_dt_after,
		case when ifnull(pcc.work_info_after,'') != '' then pcc.work_info_after else ifnull(a.c_work_info, a.work_info) end as work_info_after,
		ifnull(FORMAT((case when ifnull(pcc.contract_amt_info_after,'') != '' then pcc.contract_amt_after else a.contract_amt end), 0),'') as contract_amt_after,
		case when ifnull(pcc.contract_amt_info_after,'') != '' then pcc.contract_amt_kor_after else ifnull(a.contract_amt_kor,'') end as contract_amt_kor_after,
		ifnull(pcc.change_etc,'') as change_etc,
		ifnull(pcc.change_reason,'') as change_reason,		
		</isNotEmpty>
		<isEmpty property="change_seq">
		a.contract_end_dt as contract_end_dt_after,
		ifnull(a.c_work_info, a.work_info) as work_info_after,
		ifnull(FORMAT(a.contract_amt, 0),'') as contract_amt_after,
		ifnull(a.contract_amt_kor,'') as contract_amt_kor_after,
		'' as change_etc,
		'' as change_reason,				
		</isEmpty>	
		
		ifnull(a.doc_sts,'') as doc_sts, 
		ifnull(a.approkey_plan,'') as approkey_plan, 
		ifnull(a.approkey_meet,'') as approkey_meet, 
		ifnull(a.approkey_result,'') as approkey_result,
		ifnull(a.approkey_conclusion,'') as approkey_conclusion,
		ifnull(a.approkey_change,'') as approkey_change,
		
		ifnull(a.meet_dt,'') as meet_dt, 
		ifnull(a.meet_place,'') as meet_place,
		ifnull(a.meet_method_pt,'') as meet_method_pt,
		ifnull(a.meet_method_qa,'') as meet_method_qa,
		FORMAT(a.meet_amt_spent, 0) as meet_amt_spent,
		
		ifnull(a.result_judges_info,'') as result_judges_info, 
		ifnull(a.result_score_info,'') as result_score_info, 		
		ifnull(a.result_target_info,'') as result_target_info, 
		FORMAT(a.result_amt, 0) as result_amt					
		
		FROM cust_sto.t_purchase_contract a
		left join cust_sto.t_purchase_trade_info pti on a.seq = pti.seq and pti.tr_idx = '0' and pti.outProcessCode like '%Conclusion01%'
		
		<isNotEmpty property="change_seq">
		left join cust_sto.t_purchase_conclusion_change pcc on a.seq = pcc.seq and pcc.change_seq = $change_seq$
		</isNotEmpty>
		left join $DB_NEOS$t_co_dept_multi dm on ifnull(a.c_write_dept_seq, a.write_dept_seq) = dm.dept_seq and dm.lang_code = 'kr'
		left join $DB_NEOS$t_co_emp_multi em on ifnull(a.c_write_emp_seq, a.write_emp_seq) = em.emp_seq and em.lang_code = 'kr'
		where a.seq = $seq$
		
	</select>	
	
	
	
	<select	id="CommonSQL.SelectApprFormDataPurchase" parameterClass="HashMap" resultClass="HashMap">
		
		SELECT 
		a.seq,
		a.title,  
		a.manage_no, 
		dm.dept_name as write_dept_name,
		em.emp_name as write_emp_name,
		a.write_dt,
		
		a.created_dt, 
		a.created_by, 
		a.modify_dt, 
		a.modify_by,
		
		cust_sto.fn_get_purchase_code_text('purchaseMethod',a.purchase_method) as purchase_method, 
		cust_sto.fn_get_purchase_code_text('purchaseType',a.purchase_type) as purchase_type, 
		cust_sto.fn_get_purchase_code_text('payType',a.pay_type_info) as pay_type, 
		
		ifnull(a.doc_sts,'') as doc_sts, 
		ifnull(a.approkey_purchase,'') as approkey_purchase, 
		ifnull(a.approkey_check,'') as approkey_check,
		
		ifnull(a.check_location,'') as check_location,
		ifnull(a.release_dt,'') as release_dt,
		
		FORMAT(a.purchase_amt, 0) as purchase_amt,			
		a.purchase_amt_kor,
		a.item_info_html,
		ifnull(a.check_info_html,'') as check_info_html
		
		FROM cust_sto.t_purchase_purchase a
		left join $DB_NEOS$t_co_dept_multi dm on a.write_dept_seq = dm.dept_seq and dm.lang_code = 'kr'
		left join $DB_NEOS$t_co_emp_multi em on a.write_emp_seq = em.emp_seq and em.lang_code = 'kr'
		where a.seq = $seq$
		
	</select>	
	
	
	<update	id="CommonSQL.SaveFormInfo" parameterClass="HashMap" >
	
		UPDATE cust_sto.t_purchase_code_detail
		SET FORM_HTML=#FORM_HTML#
		WHERE `GROUP`='$GROUP$' AND CODE='$CODE$';
	
	</update>	
	
	<update	id="CommonSQL.UpdateApprContract" parameterClass="HashMap" >
	
		<isNull property="approkeyChange">
			UPDATE cust_sto.t_purchase_contract
			SET
			doc_sts='$docSts$'
			<isNotEmpty property="newManageNo">
			,manage_no='$newManageNo$'
			</isNotEmpty>			
			<isNotEmpty property="approkeyPlan">
			,approkey_plan='$approkeyPlan$'
			</isNotEmpty>	
			<isNotEmpty property="approkeyMeet">
			,approkey_meet='$approkeyMeet$'
			</isNotEmpty>
			<isNotEmpty property="approkeyResult">
			,approkey_result='$approkeyResult$'
			</isNotEmpty>
			<isNotEmpty property="approkeyConclusion">
			,approkey_conclusion='$approkeyConclusion$'
			</isNotEmpty>
			<isNotEmpty property="approkeyChange">
			,approkey_change='$approkeyChange$'
			</isNotEmpty>
			
			WHERE seq='$seq$';		  
		</isNull>
	
		<isNotNull property="approkeyChange">
			update 
			cust_sto.t_purchase_contract a
			join cust_sto.t_purchase_conclusion_change b on a.seq  = b.seq
			set
			a.approkey_change = '$approkeyChange$'
			<isEqual property="docSts" compareValue="90">
			,a.c_work_info = (case when ifnull(b.work_info_after,'') != '' then b.work_info_after else a.c_work_info end)
			,a.c_contract_end_dt = (case when ifnull(b.contract_end_dt_after,'') != '' then b.contract_end_dt_after else a.c_contract_end_dt end)
			,a.contract_amt_info = (case when ifnull(b.contract_amt_info_after,'') != '' then b.contract_amt_info_after else a.contract_amt_info end)
			,a.contract_amt = (case when ifnull(b.contract_amt_info_after,'') != '' then b.contract_amt_after else a.contract_amt end)
			,a.contract_amt_kor = (case when ifnull(b.contract_amt_info_after,'') != '' then b.contract_amt_kor_after else a.contract_amt_kor end)			
			</isEqual>			
			
			where a.seq = '$seq$' and b.change_seq = '$change_seq$';
		</isNotNull>	
		
	</update>
	
	
	<update	id="CommonSQL.UpdateApprPurchase" parameterClass="HashMap" >
	
		UPDATE cust_sto.t_purchase_purchase
		SET
		doc_sts='$docSts$'
		<isNotEmpty property="newManageNo">
		,manage_no='$newManageNo$'
		</isNotEmpty>			
		<isNotEmpty property="approkeyPurchase">
		,approkey_purchase='$approkeyPurchase$'
		</isNotEmpty>	
		<isNotEmpty property="approkeyCheck">
		,approkey_check='$approkeyCheck$'
		</isNotEmpty>
		
		WHERE seq='$seq$';		  
	
	</update>	
	
	
	<update	id="CommonSQL.UpdateApprChange" parameterClass="HashMap" >
		
		update cust_sto.t_purchase_conclusion_change 
		set 
		doc_sts = '$docSts$'
		where change_seq = '$change_seq$';
		
	</update>
	
	
	<delete	id="CommonSQL.DeleteAttachInfo" parameterClass="HashMap" >
		
		delete from cust_sto.t_purchase_attach_info where seq = '$seq$' and outProcessCode = '$outProcessCode$';

	</delete>
	
	
	<insert	id="CommonSQL.InsertCodeInfo" parameterClass="HashMap" >
	
		INSERT INTO cust_sto.t_purchase_code_detail
		(`GROUP`, CODE, NAME, USE_YN, ORDER_NUM, NOTE, LINK, FORM_HTML)
		VALUES('$GROUP$', '$CODE$', '$NAME$', '$USE_YN$', '$ORDER_NUM$', '$NOTE$', '$LINK$', '');	

	</insert>	
	
		
	<insert	id="CommonSQL.InsertAttachInfo" parameterClass="HashMap" >

		INSERT INTO cust_sto.t_purchase_attach_info
		(file_id, file_name, file_ext, seq, outProcessCode, form_code, use_yn, created_dt, created_by)
		VALUES('$fileId$', '$fileName$', '$fileExt$', '$seq$', '$outProcessCode$', '$code$', 'Y', now(), '$created_by$');		

	</insert>		
	
	
	<select	id="CommonSQL.SelectAttachList" parameterClass="HashMap" resultClass="HashMap">
		
		select * 
		from cust_sto.t_purchase_attach_info where seq = '$seq$' and outProcessCode = '$outProcessCode$'

	</select>
	
	
	<select	id="CommonSQL.SelectFormAttachList" parameterClass="HashMap" resultClass="HashMap">
	
		select
		b.LINK,
		b.CODE,
		b.NAME,
		ifnull(c.file_id,'') as file_id,
		ifnull(c.file_name,'') as file_name,
		ifnull(c.file_ext,'') as file_ext,
		'N' as new_yn
		from cust_sto.t_purchase_code_group a
		join cust_sto.t_purchase_code_detail b on a.`group` = b.`group` and a.USE_YN ='Y' and b.USE_YN  = 'Y'
		left join cust_sto.t_purchase_attach_info c on b.`GROUP`  = concat('attachForm_', c.outProcessCode) and b.CODE = c.form_code and c.seq = '$seq$'	
		where a.`group` = concat('attachForm_', '$outProcessCode$')
	
	</select>
	
	
	<select	id="CommonSQL.SelectCodeValueText" parameterClass="HashMap" resultClass="HashMap">
	
		select  cust_sto.fn_get_purchase_code_text('$group$','$value$') AS value_name
		from dual;
		
	</select>
	
	
	<delete	id="CommonSQL.DeleteBudgetInfo" parameterClass="HashMap" >
		
		delete from cust_sto.t_purchase_budget_info where seq = '$seq$' and outProcessCode = '$outProcessCode$';

	</delete>	
	
	<insert	id="CommonSQL.InsertBudgetInfo" parameterClass="HashMap" >
		
		INSERT INTO cust_sto.t_purchase_budget_info
		(seq, outProcessCode, erp_budget_seq, erp_budget_name, erp_budget_div_seq, erp_budget_div_name, erp_bgt1_seq, erp_bgt2_seq, erp_bgt3_seq, erp_bgt4_seq, erp_bgt1_name, erp_bgt2_name, erp_bgt3_name, erp_bgt4_name, pjt_seq, pjt_name, bottom_seq, bottom_name, amt, created_dt, created_by
		<isNotEmpty property="txt_open_amt">
		,txt_open_amt
		,txt_cons_balance_amt
		,txt_apply_amt
		,txt_balance_amt
		</isNotEmpty>			
		)
		VALUES('$seq$', '$outProcessCode$', '$erp_budget_seq$', '$erp_budget_name$', '$erp_budget_div_seq$', '$erp_budget_div_name$', '$erp_bgt1_seq$', '$erp_bgt2_seq$', '$erp_bgt3_seq$', '$erp_bgt4_seq$', '$erp_bgt1_name$', '$erp_bgt2_name$', '$erp_bgt3_name$', '$erp_bgt4_name$', '$pjt_seq$', '$pjt_name$', '$bottom_seq$', '$bottom_name$', '$amt$', now(), '$created_by$'
		<isNotEmpty property="txt_open_amt">
		,'$txt_open_amt$'
		,'$txt_cons_balance_amt$'
		,'$txt_apply_amt$'
		,'$txt_balance_amt$'
		</isNotEmpty>			
		);

	</insert>
	
	<select	id="CommonSQL.SelectBudgetList" parameterClass="HashMap" resultClass="HashMap">
		
		select
		a.seq,
		a.outProcessCode,	
		a.erp_budget_seq,	
		a.erp_budget_name,
		a.erp_budget_div_seq,
		a.erp_budget_div_name,
		a.erp_bgt1_seq,
		a.erp_bgt1_name,
		a.erp_bgt2_seq,
		a.erp_bgt2_name,
		a.erp_bgt3_seq,
		a.erp_bgt3_name,
		a.erp_bgt4_seq,
		a.erp_bgt4_name,
		a.pjt_seq,
		a.pjt_name,
		a.bottom_seq,
		a.bottom_name,
		FORMAT(a.amt,0) as amt,
		ifnull(a.txt_open_amt,'') as txt_open_amt,
		ifnull(a.txt_cons_balance_amt,'') as txt_cons_balance_amt,
		ifnull(a.txt_apply_amt,'') as txt_apply_amt,
		ifnull(a.txt_balance_amt,'') as txt_balance_amt,
		<isNotEmpty property="consMode">
		c.budget_seq as conffer_budget_seq,
		</isNotEmpty>		
		a.created_dt,
		a.created_by 
		from cust_sto.t_purchase_budget_info a 
		<isNotEmpty property="consMode">
		join t_exnp_consdoc b on a.outProcessCode = b.out_process_interface_id and a.seq = b.out_process_interface_m_id
		join t_exnp_consbudget c on b.cons_doc_seq = c.cons_doc_seq and a.erp_budget_seq = c.erp_budget_seq
		</isNotEmpty>		
		where a.seq = '$seq$' and a.outProcessCode = '$outProcessCode$' 

	</select>	
	
	<delete	id="CommonSQL.DeleteTradeInfo" parameterClass="HashMap" >
		
		delete from cust_sto.t_purchase_trade_info where seq = '$seq$' and outProcessCode = '$outProcessCode$';

	</delete>	
	
	<insert	id="CommonSQL.InsertTradeInfo" parameterClass="HashMap" >
	
		INSERT INTO cust_sto.t_purchase_trade_info
		(seq, outProcessCode, tr_seq, tr_name, at_tr_name, ceo_name, tr_reg_number, addr, depositor, ba_nb, btr_name, btr_seq, tr_fg, tr_fg_name, pm_email, pm_hp, pm_name, created_dt, created_by, tr_idx
		<isNotEmpty property="hope_company_info">
		, hope_company_info
		, hope_attach_info
		</isNotEmpty>		
		)
		VALUES('$seq$', '$outProcessCode$', '$tr_seq$', '$tr_name$', '$at_tr_name$', '$ceo_name$', '$tr_reg_number$', '$addr$', '$depositor$', '$ba_nb$', '$btr_name$', '$btr_seq$', '$tr_fg$', '$tr_fg_name$', '$pm_email$', '$pm_hp$', '$pm_name$', now(), '$created_by$', '$tr_idx$'
		<isNotEmpty property="hope_company_info">
		, '$hope_company_info$'
		, '$hope_attach_info$'
		</isNotEmpty>			
		);
		
	</insert>
	
	<select	id="CommonSQL.SelectTradeList" parameterClass="HashMap" resultClass="HashMap">
		
		select * 
		from cust_sto.t_purchase_trade_info where seq = '$seq$' and outProcessCode = '$outProcessCode$';

	</select>		
	
	<select	id="CommonSQL.SelectTradeInfo" parameterClass="HashMap" resultClass="HashMap">
		
		select * 
		from cust_sto.t_purchase_trade_info where seq = '$seq$' and outProcessCode = '$outProcessCode$' limit 1;

	</select>			
	
	<select	id="CommonSQL.SelectResdocInfo" parameterClass="HashMap" resultClass="HashMap">
		
		select * from $DB_NEOS$t_exnp_resdoc where res_doc_seq = '$resDocSeq$';

	</select>
	
	
	<delete	id="CommonSQL.DeletePaymentDocInfo" parameterClass="HashMap" >
		delete from cust_sto.t_purchase_payment_doc_info where seq = '$seq$' and outProcessCode = '$outProcessCode$' and res_doc_seq = '$resDocSeq$';
	</delete>
	
	
	<insert	id="CommonSQL.InsertPaymentDocInfo" parameterClass="HashMap" >
		INSERT INTO cust_sto.t_purchase_payment_doc_info
		(seq, outProcessCode, res_doc_seq, pay_type, pay_cnt, res_amt, remain_amt, created_dt, created_by)
		VALUES('$seq$', '$outProcessCode$', '$resDocSeq$', '$payType$', '$payCnt$', '$resAmt$', '$remainAmt$', NOW(), '$created_by$');
	</insert>		
	
	<update	id="CommonSQL.DelConsTemp" parameterClass="HashMap" >
	
		update $DB_NEOS$t_exnp_consdoc 
		set
		doc_status = null
		, out_process_interface_id = concat(out_process_interface_id, '_DEL')
		, out_process_interface_m_id = concat(out_process_interface_m_id, '_DEL')
		, out_process_interface_d_id = 'DUPLICATE_DEL'
		where
		out_process_interface_id = '$out_process_interface_id$'
		and out_process_interface_m_id = '$out_process_interface_m_id$'
		and out_process_interface_d_id = '$out_process_interface_d_id$';	

	</update>
	
	<update	id="CommonSQL.UpdateConsDocSts" parameterClass="HashMap" >
	
		update $DB_NEOS$t_exnp_consdoc 
		set
        doc_status = '$docSts$'
		<isNotEmpty property="docId">
		, doc_seq = '$docId$'
		</isNotEmpty>
		<isNotEmpty property="docNum">
		, doc_no = '$docNum$'
		</isNotEmpty>				          
		where
		out_process_interface_id = '$out_process_interface_id$'
		and out_process_interface_m_id = '$out_process_interface_m_id$'
		and out_process_interface_d_id = '$out_process_interface_d_id$';

	</update>
	
	
	<update	id="CommonSQL.UpdateCommonCode" parameterClass="HashMap" >
	
		update cust_sto.t_purchase_code_detail 
		set
		LINK = LINK
		<isNotEmpty property="NAME">
		, NAME = '$NAME$'
		</isNotEmpty>
		<isNotEmpty property="USE_YN">
		, USE_YN = '$USE_YN$'
		</isNotEmpty>				
		<isNotEmpty property="ORDER_NUM">
		, ORDER_NUM = '$ORDER_NUM$'
		</isNotEmpty>					
		<isNotNull property="NOTE">
		, NOTE = '$NOTE$'
		</isNotNull>	
		<isNotEmpty property="LINK">
		, LINK = '$LINK$'
		</isNotEmpty>										          
		where
		`GROUP` = '$GROUP$' and `CODE` = '$CODE$';

	</update>	
	
	<delete	id="CommonSQL.DeleteCommonCode" parameterClass="HashMap" >
	
		delete 
		from cust_sto.t_purchase_code_detail 
		where
		`GROUP` = '$GROUP$' and `CODE` = '$CODE$';

	</delete>		
	
	
	<select	id="CommonSQL.SelectContractManagerList" parameterClass="HashMap" resultClass="HashMap">
		
		SELECT distinct car.emp_seq as empSeq 
		FROM $DB_NEOS$t_co_auth_relate car
		JOIN $DB_NEOS$t_co_authcode a ON car.author_code = a.author_code  AND car.author_type = a.author_type AND a.author_use_yn = 'Y'
		join $DB_NEOS$t_co_menu_auth ma on a.author_code = ma.author_code 
		join $DB_NEOS$t_co_menu m on ma.menu_no = m.menu_no and m.url_path like '%/purchase/admin/ContractList.do%'
		where car.author_type = '001'
		
	</select>
	
	
	
	<select	id="CommonSQL.SelectCodeGroupList_TOTALCOUNT" parameterClass="HashMap" resultClass="Integer">
		
		SELECT 
		count(*)		
		from cust_sto.t_purchase_code_group where `type` = '$TYPE$'
	
	</select>
		
	<select	id="CommonSQL.SelectCodeGroupList" parameterClass="HashMap" resultClass="HashMap">
		
		select * 
		from cust_sto.t_purchase_code_group where `type` = '$TYPE$'
		order by ORDER_NUM
		LIMIT $startNum$ ,  $endNum$	
		
	</select>	
	
	<select	id="CommonSQL.SelectCodeList_TOTALCOUNT" parameterClass="HashMap" resultClass="Integer">
		
		SELECT 
		count(*)		
		from cust_sto.t_purchase_code_detail
		where
		<isEqual property="GROUP" compareValue="PURCHASE_GOAL">
		`GROUP` = 'hopeCompany'
		</isEqual>
		<isNotEqual property="GROUP" compareValue="PURCHASE_GOAL">
		`GROUP` = '$GROUP$'
		</isNotEqual>			
	
	</select>
		
	<select	id="CommonSQL.SelectCodeList" parameterClass="HashMap" resultClass="HashMap">
	
		<isEqual property="GROUP" compareValue="PURCHASE_GOAL">
		select 
		'PURCHASE_GOAL' as `GROUP`,	
		concat(a.CODE, '_$purchaseGoalYear$') as CODE,	
		a.NAME,	
		ifnull(b.USE_YN,'Y') as USE_YN,	
		ifnull(b.ORDER_NUM,'0') as ORDER_NUM,	
		ifnull(b.NOTE,'0') as NOTE,	
		ifnull(b.LINK,'') as LINK
		from cust_sto.t_purchase_code_detail a
		left join cust_sto.t_purchase_code_detail b on b.`GROUP` = 'PURCHASE_GOAL' and concat(a.CODE, '_$purchaseGoalYear$') = b.CODE 
		where a.`GROUP` = 'hopeCompany' and a.CODE != '00'
		order by ifnull(b.ORDER_NUM,a.ORDER_NUM)
		</isEqual>
		<isNotEqual property="GROUP" compareValue="PURCHASE_GOAL">
		select 
		`GROUP`,	
		CODE,	
		NAME,	
		USE_YN,	
		ifnull(ORDER_NUM,'') as ORDER_NUM,	
		ifnull(NOTE,'') as NOTE,	
		ifnull(LINK,'') as LINK
		from cust_sto.t_purchase_code_detail where `GROUP` = '$GROUP$'
		order by ORDER_NUM
		</isNotEqual>			
		LIMIT $startNum$ ,  $endNum$	
	</select>						
		
</sqlMap>